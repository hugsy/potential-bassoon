name: tests
on: push

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        variant:
          - {os: ubuntu-latest, generator: clang, arch: x64, config: Release} 

    runs-on: ubuntu-latest
    name: ${{ matrix.variant.os }} / ${{ matrix.variant.generator }} / ${{ matrix.variant.arch }} / ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    
    - name: Show GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Run test coverage
      id: get_coverage
      run: |
        set -x
        commit=$(git rev-parse HEAD)
        echo "commit=${commit}" >> $GITHUB_OUTPUT
        include_tests=$(git diff ${{ github.event.before }} ${{ github.event.after }} --compact-summary | egrep  --count '^ tests/' || true)
        echo "include_tests=1" >> $GITHUB_OUTPUT
        include_docs=$(git diff ${{ github.event.before }} ${{ github.event.after }} --compact-summary | egrep  --count '^ docs/' || true)
        echo "include_docs=0" >> $GITHUB_OUTPUT
        
    - uses: actions/github-script@v6
      env:
        COMMIT: ${{ steps.get_coverage.outputs.commit }}

      with:
        script: |
          const tests_changes = ${{ steps.get_coverage.outputs.include_tests }};
          const docs_changes  = ${{ steps.get_coverage.outputs.include_docs }};
          const comment = `## ðŸ¤– Coverage Update

            * Commit: ${process.env.COMMIT}

          This PR:
            * ${(tests_changes == 0) ? "does not include" : "includes"} changes to tests
            * ${(docs_changes == 0) ? "does not include" : "includes"} changes to documentation

          `;

          const { owner, repo, number } = context.issue;
          await github.rest.issues.createComment({ owner, repo, issue_number: number, body: comment });

          if(docs_changes > 0) {
            await github.rest.issues.addLabels({              
              issue_number: number,
              owner: owner,
              repo: repo, 
              labels: ['documentation']});
          }

          if(tests_changes > 0) {
            await github.rest.issues.addLabels({              
              issue_number: number,
              owner: owner,
              repo: repo, 
              labels: ['automation']});
          }          
